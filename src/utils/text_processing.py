import re
from langchain.docstore.document import Document


# ==========================
# 游댳 Funciones para fragmentaci칩n de documentos
# ==========================
def split_texts_general(documents):
    """
    Divide los textos en fragmentos seg칰n su estructura formal
    (T칈TULO, CAP칈TULO, SECCI칍N, ART칈CULO).

    Args:
        documents (list[Document]): Lista de documentos de entrada, 
                                    cada uno con texto y metadatos.

    Returns:
        list[Document]: Lista de objetos `Document` con fragmentos extra칤dos
                        y metadatos preservados.
    """
    all_chunks = []
    pattern = (
        r"((?:T[칈I]TULO|CAP[칈I]TULO|SECCI[칍O]N|ART[칈I]CULO)\s+[\w\d\-]+[\s\S]*?)"
        r"(?=\n(?:T[칈I]TULO|CAP[칈I]TULO|SECCI[칍O]N|ART[칈I]CULO)\s+[\w\d\-]+|\Z)"
    )
    for doc in documents:
        text = doc.page_content
        metadata = doc.metadata
        matches = re.findall(pattern, text, re.IGNORECASE)

        if not matches:
            # Si no hay coincidencias, guarda el texto completo como un solo fragmento
            all_chunks.append(Document(page_content=text.strip(), metadata=metadata))
        else:
            for match in matches:
                # Se descartan fragmentos demasiado peque침os para ser 칰tiles
                if len(match.strip()) > 50:
                    all_chunks.append(Document(page_content=match.strip(), metadata=metadata))
    return all_chunks


# ==========================
# 游댳 Funciones para limpiar y procesar respuestas de LLM
# ==========================
def process_llm_response(response: str) -> str:
    """
    Limpia y valida la salida de un modelo de lenguaje.

    Args:
        response (str): Texto generado por el modelo.

    Returns:
        str: Texto limpio y sin espacios extra. 
             Si la respuesta est치 vac칤a, devuelve un mensaje est치ndar 
             indicando que no hay informaci칩n suficiente.
    """
    if response and response.strip():
        return response.strip()
    return "Lo siento, pero no tengo informaci칩n suficiente para responder a esa pregunta."


def obtener_respuesta_desde_respuesta_tag(texto: str) -> str:
    """
    Extrae el contenido relevante despu칠s de la etiqueta 'Respuesta:'.

    Args:
        texto (str): Texto completo generado por el modelo.

    Returns:
        str: Solo la parte del texto posterior a 'Respuesta:'.
             Si la etiqueta no existe, devuelve el texto original limpio.
    """
    if "Respuesta:" in texto:
        return texto.split("Respuesta:")[-1].strip()
    return texto.strip()
